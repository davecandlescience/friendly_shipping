---
http_interactions:
- request:
    method: get
    uri: https://api.shipengine.com/v1/carriers
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
        - "*/*"
      User-Agent:
        - rest-client/2.1.0 (darwin22 arm64) ruby/3.2.2p53
      Content-Type:
        - application/json
      Api-Key:
        - "%SHIPENGINE_API_KEY%"
      Accept-Encoding:
        - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
        - api.shipengine.com
  response:
    status:
      code: 207
      message: Multi-Status
    headers:
      Date:
        - Tue, 14 Nov 2023 20:25:22 GMT
      Content-Type:
        - application/json; charset=utf-8
      Content-Length:
        - '31976'
      Connection:
        - keep-alive
      Ratelimit-Reset:
        - '39'
      Ratelimit-Remaining:
        - '199'
      Ratelimit-Limit:
        - '200'
      X-Shipengine-Requestid:
        - 893cef9a-5912-447f-915f-0f785c0501e7
      Request-Id:
        - 893cef9a-5912-447f-915f-0f785c0501e7
      Branch-Name:
        - bWFpbg
      Permissions-Policy:
        - accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(),
          microphone=(), payment=(), usb=(), interest-cohort=()
      Strict-Transport-Security:
        - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
        - nosniff
      X-Robots-Tag:
        - noindex
      Content-Security-Policy:
        - default-src 'none'; frame-ancestors 'none'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 18 Aug 2021 15:42:31 GMT
- request:
    method: post
    uri: https://api.shipengine.com/v1/rates/estimate
    body:
      encoding: UTF-8
      string: '{"carrier_ids":["se-725893"],"from_country_code":"US","from_postal_code":"78756","to_country_code":"US","to_postal_code":"91521","to_city_locality":"Herndon","to_state_province":"IL","weight":{"value":99.47949521284937,"unit":"pound"},"confirmation":"none","address_residential_indicator":"no"}'
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin18.5.0 x86_64) ruby/2.6.5p114
      Content-Type:
      - application/json
      Api-Key:
      - "%SHIPENGINE_API_KEY%"
      Content-Length:
      - '294'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - api.shipengine.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 18 Aug 2021 15:42:31 GMT
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '877'
      Connection:
      - keep-alive
      X-Shipengine-Requestid:
      - 6dda9b94-3134-494b-8fc5-2fcb22da8d3e
      Vary:
      - Origin
      Access-Control-Allow-Origin:
      - https://www.shipengine.com
    body:
      encoding: UTF-8
      string: "[\r\n  {\r\n    \"rate_type\": \"check\",\r\n    \"carrier_id\": \"se-444555\",\r\n
        \   \"shipping_amount\": null,\r\n    \"insurance_amount\": null,\r\n    \"confirmation_amount\":
        null,\r\n    \"other_amount\": null,\r\n    \"zone\": null,\r\n    \"package_type\":
        null,\r\n    \"delivery_days\": null,\r\n    \"guaranteed_service\": false,\r\n
        \   \"estimated_delivery_date\": null,\r\n    \"carrier_delivery_days\": null,\r\n
        \   \"ship_date\": null,\r\n    \"negotiated_rate\": false,\r\n    \"service_type\":
        null,\r\n    \"service_code\": null,\r\n    \"trackable\": false,\r\n    \"carrier_code\":
        \"endicia\",\r\n    \"carrier_nickname\": null,\r\n    \"carrier_friendly_name\":
        \"Endicia\",\r\n    \"validation_status\": \"invalid\",\r\n    \"warning_messages\":
        [],\r\n    \"error_messages\": [\r\n      \"Error calculating rates for one
        or more mail classes: There are no rates available for the package information
        provided. Error encountered (Log ID: 33439)\"\r\n    ]\r\n  }\r\n]"
    http_version:
  recorded_at: Fri, 03 Nov 2023 19:44:34 GMT
recorded_with: VCR 6.1.0
